#!/usr/bin/env python

from __future__ import print_function

import argparse
import functools
import os
import re
import subprocess


def validate_arg(predicate, value, message):
    if not predicate(value):
        raise argparse.ArgumentTypeError(message)


def image_file(image):
    validate_arg(os.path.exists, image, '{} does not exist'.format(image))
    return image


def raw_disk(disk):
    validate_arg(functools.partial(re.match, '^disk[0-9]+$'), disk,
                 '{} is not a valid name'.format(disk))
    rdisk = '/dev/r{}'.format(disk)
    validate_arg(os.path.exists, rdisk, '{} does not exist'.format(disk))
    return dict(disk=disk, rdisk=rdisk)


def unmount_disk(disk):
    subprocess.check_call(['diskutil', 'unmountDisk', disk])


def eject_disk(disk):
    subprocess.check_call(['diskutil', 'eject', disk])


def flash_disk(image, disk):
    if_str = 'if={}'.format(image)
    of_str = 'of={}'.format(disk)
    subprocess.check_call(['sudo', 'dd', if_str, of_str, 'bs=1m'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='flash an image onto a disk',
                                     add_help=False)
    parser.add_argument('--help', action='help',
                        help='show this help message and exit')
    parser.add_argument('--image', default='raspbian.img', type=image_file)
    parser.add_argument('disk', help='the destination disk', type=raw_disk)
    args = parser.parse_args()
    unmount_disk(args.disk.get('disk'))
    flash_disk(args.image, args.disk.get('rdisk'))
    eject_disk(args.disk.get('disk'))
